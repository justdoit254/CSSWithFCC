html {
    box-sizing:border-box;
}

body {
    font-family: sans-serif;
    color: #0a0a23;
}

span[class~="sr-only"] { /* To select all the span elements with this class*/
    border: 0 !important;
    clip: rect(1px, 1px, 1px, 1px);
    clip-path: inset(50%);
    -webkit-clip-path: inset(50%);
    width: 1px;
    height: 1px;
    overflow: hidden;
    white-space: nowrap;
    position: absolute;
    padding: 0;
    margin: -1;
}

h1 {
    max-width: 37.25rem;
    margin: 0 auto;
    padding: 1.5rem 1.25rem;
}

h1 .flex {
    display: flex;
    flex-direction: column-reverse;
    gap: 1rem;
}

h1 .flex span:first-of-type { /* To select the first span element in .flex container */
    font-size: 0.7em;
}
h1 .flex span:last-of-type { /* To select the first span element in .flex container */
    font-size: 1.2em;
}

section {
    max-width: 40rem;
    margin: 0 auto;
    border: 2px solid #d0d0d5;
}

#years {
    display: flex;
    justify-content: flex-end;
    position:sticky;
    top: 0;
    color: #fff;
    background-color: #0a0a23;
    z-index: 999;
    margin: 0 -2;
    padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0;
}

#years span[class] { /* target any span element that has a class attribute set, regardless of the attribute's value */
    font-weight: bold;
    width: 4.5rem;
    text-align: right;
}

.table-wrap {
    padding: 0 0.75rem 1.5rem 0.75rem;
}

span:not(.sr-only) {
    /* The :not() pseudo-selector is used to target all elements that do not match the selector - in this case, any of your span elements that do not have the span[class~="sr-only"] class. This ensures that your earlier rules for the sr-only class are not overwritten. */
    /* By using !important selector in each property of span[class~=..] not can be removed */
    font-weight: normal;
}

table {
    border-collapse: collapse;
    border: 0;
    width: 100%;
    position: relative;
    margin-top: 3rem;
}

table caption {
    color: #356eaf;
    font-size: 1.3em;
    font-weight: normal;
    position: absolute;
    top: -2.25rem;
    left: 0.5rem;
}

tbody td {
    /* This approach ensures that the width is fixed, whereas setting width specifically would allow the elements to shrink to the container (because we are using flexbox). */
    width: 100vw;
    min-width: 4rem;
    max-width: 4rem;
}

tbody th {
    width: calc(100% - 12rem)
}

tr[class="total"] {
    /* The [attribute="value"] selector targets any element that has an attribute with a specific value. */
    border-bottom: 4px double #0a0a23;
    font-weight: bold;
}
/*The key difference between tr[class="total"] and tr.total is that the first will select tr elements where the only class is total. The second will select tr elements where the class includes total*/

tr[class="total"] th{
    text-align: left;
    padding: 0.5rem 0 0.25rem 0.5rem;
}

tr.total td {
    text-align: right;
    padding: 0 0.25rem;
}

tr.total td:nth-of-type(3) {
    /* Used to select nth td in tr*/
    padding: 0.5rem;
}

tr.total:hover {
    background-color: #99c9ff;
}

td[class="current"] {
    font-style: italic;
}

tr[class="data"] {
    background-image: linear-gradient(to bottom, #dfdfe2 1.845rem, white 1.845rem);
}

tr.data th {
    text-align: left;
    padding-top: 0.3rem;
    padding-left: 0.5rem;
}

tr.data th .description {
    display: block;
    font-style: italic;
    font-weight: normal;
    padding: 1rem 0 0.75rem;
    margin-right: -13.5rem;
    /* After this span:not(.sr-only) can be removed*/
}

tr.data td {
    text-align:right;
    vertical-align: top;
    padding: 0.3rem 0.25rem 0;
}

tr.data td:last-of-type {
    padding-right: 0.5rem;
}